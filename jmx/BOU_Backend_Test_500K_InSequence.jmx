<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - SB1" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://vmw12apxcldprfd.gencos.com\NORWEGIAN;DatabaseName=SB1APXFirm;integratedSecurity=false</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Advent.sa</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sa</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - SB1-self" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://pdapxdac.gencos.com\DANISH;DatabaseName=APXFirm;integratedSecurity=false</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Advent.sa</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sa</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - cosapx7" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://cosapx7.gencos.com\latin1;DatabaseName=bli1065APXFirm;integratedSecurity=false</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Advent.sa</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sa</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - Save Trade Bltoter -ToBeRemoved" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1510214413000</longProp>
        <longProp name="ThreadGroup.end_time">1510214413000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

//New blotter
vars.put(&quot;NewBlotterName&quot;,new String(&quot;BOU_TestBlotter500K&quot;));
//new portfolio to store the transaction posted from blotter
vars.put(&quot;NewPortfolioCode&quot;,new String(&quot;MO_PortForPosting&quot;));//don&apos;t change the portfoliocode &quot;MO_PortForPosting&quot;, the procedure for blotter post will use it.

//props.put (&quot;NewBlotterName&quot;,new String(&quot;BOU_TestBlotter500K&quot;));//BeanShell Post
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">--if procedure exists, delete it.
IF OBJECT_ID(&apos;pAddTransactionsToTradeBlotter&apos;) IS NOT NULL
    DROP PROCEDURE pAddTransactionsToTradeBlotter


--if the big blotter exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
declare @p1 xml
set @p1=null   

declare @BlotterID varchar(64)
set @BlotterID = (select ObjectID from AoObject where Name = &apos;${NewBlotterName}&apos;)
declare @auditeventid varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)

declare @p4 xml    
set @p4=convert(xml,N&apos;&lt;Root&gt; &lt;Blotter MaxLineAuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; NameSpaceID=&quot;221&quot; BlotterID=&quot;&apos;+@BlotterID+&apos;&quot; BlotterTypeID=&quot;105&quot; BlotterTypeDisplayName=&quot;Trade Blotter&quot; BlotterName=&quot;${NewBlotterName}&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot; IsSystem=&quot;0&quot; IsPrimaryBlotter=&quot;0&quot;/&gt;&lt;/Root&gt;&apos;)   
 
exec pQbTxProcessBlotter @OutputIDList=@p1 output,@AuthUserID=-1001,@RunAsUserID=-1001,@XmlBlotterDoc=@p4  
--select @p1



--if the big portfolio exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
--declare @auditeventid varchar(64)
declare @PortfolioID varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)
set @PortfolioID = (select ObjectID from AoObject where Name = &apos;${NewPortfolioCode}&apos; and classid=76)
--declare @p1 xml 
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio AuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; PortfolioID=&quot;&apos; + @PortfolioID + &apos;&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @Xmlportfolio=@p1,@isForcedDeleteActivities=1,@isForcedDeleteInterestedParties=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">--\\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pAddTransactionsToTradeBlotter.sql
--generate a procedure in APXFirm, execute the procedure to add transactions to a blotter

-- $Header: $

CREATE PROCEDURE pAddTransactionsToTradeBlotter
(
	@BlotterID int,
	@TranCnt1 int, --li cano cash
	@TranCnt2 int, --li afno
	@TranCnt3 int, --by afno
	@TranCnt4 int, --sl afno
	@TranCnt5 int, --dv afno
	@TranCnt6 int  --ss afno
)
AS
BEGIN
declare @TranTmp1 int
declare @TranTmp2 int
declare @TranTmp3 int
declare @TranTmp4 int
declare @TranTmp5 int
declare @TranTmp6 int

declare @TranMaxTmp int

declare @TradeDate1 date
declare @TradeDate2 date
declare @TradeDate3 date
declare @TradeDate4 date
declare @TradeDate5 date
declare @TradeDate6 date
declare @PortfolioID int
declare @PortfolioCode nvarchar(32)
declare @PortfolioCount int

declare @TranMax int
declare @TranInit int
set @TranInit = 20000
set @TranMax = @TranInit

set @TradeDate1 = &apos;05/01/2010&apos;;
set @TradeDate2 = &apos;06/01/2010&apos;;
set @TradeDate3 = &apos;07/01/2010&apos;;
set @TradeDate4 = &apos;08/01/2010&apos;;
set @TradeDate5 = &apos;09/01/2010&apos;;
set @TradeDate6 = &apos;10/01/2010&apos;;

Declare @PortfoioForPost table
(
	PortfolioID int,
	PortfolioCode nvarchar(32)
)

insert into @PortfoioForPost select PortfolioID, PortfolioCode from AdvApp.vPortfolio where PortfolioCode like &apos;MO_PortForPosting%&apos;


set @PortfolioCount = (select count(PortfolioID) from @PortfoioForPost)
--Set @TranCnt1 = 10

while @PortfolioCount&gt;0
Begin
	set @PortfolioID = (select MIN(PortfolioID) from @PortfoioForPost)
	set @PortfolioCode = (select PortfolioCode from @PortfoioForPost where PortfolioID = @PortfolioID)
	set @TranTmp1 = @TranCnt1
	set @TranTmp2 = @TranCnt2
	set @TranTmp3 = @TranCnt3
	set @TranTmp4 = @TranCnt4
	set @TranTmp5 = @TranCnt5
	set @TranTmp6 = @TranCnt6
	set @TranMaxTmp = @TranMax
	while  @TranTmp1 &gt; 0
	Begin
			begin tran
			exec dbo.padvauditeventadmin
		
			insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				TradeAmount,
				SourceID,
				RecID
			
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;li&apos;,
				Type1                      =                                   &apos;cano&apos;,
				Symbol1                    =                                   &apos;cash&apos;,
				SecurityID1				   =								   6,
				TradeDate                  =                                    @TradeDate1,
				TradeAmount				   =								    1000,
				SourceID                   =                                    1,
				RecID                      =                                    19
					

	exec dbo.padvauditeventend
	commit

			set @TranTmp1 = @TranTmp1 - 1
			set @TranMaxTmp = @TranMaxTmp- 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate1 = DATEADD(DAY,1,@TradeDate1)
				Set @TranMaxTmp = @TranInit
			End
	End

	--Set @TranCnt2 = 100
	Set @TranMaxTmp = @TranMax
	while  @TranTmp2 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				SourceID,
				RecID,
				MarkToMarket,
				Pledge,
				CustodianID,
				PerfContributionOrWithdrawal
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;li&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate2,
				Quantity                   =                                    100,
				TradeAmount				   =								    &apos;@804.82&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    6,
				MarkToMarket               =									1,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				PerfContributionOrWithdrawal =                                  1

	exec dbo.padvauditeventend
	commit
					

			set @TranTmp2 = @TranTmp2 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate2 = DATEADD(DAY,1,@TradeDate2)
				Set @TranMaxTmp = @TranMax
			End

	End

	--Set @TranCnt3 = 10000
	set @TranMaxTmp = @TranMax
	while  @TranTmp3 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				Pledge,
				CustodianID,
				PerfContributionOrWithdrawal,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;by&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate3,
				Quantity                   =                                    10,
				TradeAmount				   =								    800,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    0,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				PerfContributionOrWithdrawal =                                  1,
				BrokerRepSymbol            =									&apos;SB1&apos;

	exec dbo.padvauditeventend
	commit
				

			set @TranTmp3 = @TranTmp3 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate3 = DATEADD(DAY,1,@TradeDate3)
				Set @TranMaxTmp = @TranMax
			End

	End

	--Set @TranCnt4 = 10000
	set @TranMaxTmp = @TranMax
	while  @TranTmp4 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;sl&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate4,
				Quantity                   =                                    5,
				TradeAmount				   =								    &apos;@90&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    1,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				BrokerRepSymbol            =									&apos;SB1&apos;
			

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp4 = @TranTmp4 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate4 = DATEADD(DAY,1,@TradeDate4)
				Set @TranMaxTmp = @TranMax
			End

	End

	set @TranMaxTmp = @TranMax
	while  @TranTmp5 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID
			
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;dv&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   NULL,
				TradeDate                  =                                    @TradeDate5,
				Quantity                   =                                    10,
				TradeAmount				   =								    &apos;@2&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    23
			

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp5 = @TranTmp5 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate5 = DATEADD(DAY,1,@TradeDate5)
				Set @TranMaxTmp = @TranMax
			End

	End

	set @TranMaxTmp = @TranMax
	while  @TranTmp6 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				Pledge,
				CustodianID,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;ss&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate6,
				Quantity                   =                                    10,
				TradeAmount				   =								    &apos;@20&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    0,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				BrokerRepSymbol            =									&apos;SB1&apos;

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp6 = @TranTmp6 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate6 = DATEADD(DAY,1,@TradeDate6)
				Set @TranMaxTmp = @TranMax
			End

	End
	Delete from @PortfoioForPost where PortfolioID = @PortfolioID
	set @PortfolioCount = @PortfolioCount -1

End
	
Return 0

End

--End \\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pAddTransactionsToTradeBlotter.sql
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">--Create a blotter

exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 
declare @p1 xml 
declare @p4 xml 
set @p4=convert(xml,N&apos;&lt;Root&gt;&lt;Blotter NameSpaceID=&quot;221&quot; OwnerID=&quot;-1001&quot; BlotterID=&quot;-1&quot; BlotterDisplayName=&quot;${NewBlotterName}&quot; BlotterTypeID=&quot;105&quot; BlotterName=&quot;${NewBlotterName}&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot;/&gt;&lt;/Root&gt;&apos;) 
exec pQbTxProcessBlotter @OutputIDList=@p1 output,@AuthUserID=-1001,@RunAsUserID=-1001,@XmlBlotterDoc=@p4  


--Create a portfolio ${NewPortfolioCode}
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 

--declare @p1 xml
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio ProcessingGroupName=&quot;Default Owners&quot; ProcessingGroupID=&quot;-14&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; OwnerName=&quot;Default Owners&quot; OwnerID=&quot;-14&quot; MaintainCalcData=&quot;1&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot; SupportMiFID=&quot;0&quot; AddToMasterGroup=&quot;1&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @xmlPortfolio=@p1,@xmlPortfolioBaseLabel=default,@xmlObjectAccessRights=default,@xmlPortfolioBaseReinvestException=default,@xmlPortfolioBaseIndex=default,@xmlPortfolioBaseSyntheticIndex=default,@xmlPortfolioAmortization=default,@xmlPortfolioGroupAssociation=default,@xmlPortfolioCompositeAssociation=default,@xmlInterestedParty=default,@xmlDashboardAssociation=default,@xmlPortfolioBaseCashClosing=default,@xmlPortfolioBaseClosing=default,@xmlSecTypeClosing=default,@isForcedDeleteActivities=default,@isForcedDeleteInterestedParties=default


--Add 500K transaction lines for blotter by calling the procedure created before
declare @BlotterID varchar(64)
set @BlotterID = (select ObjectID from AoObject where Name = &apos;${NewBlotterName}&apos;)
exec pAddTransactionsToTradeBlotter @BlotterID, 100000,100000,100000,100000,50000,50000 --500K
--100000,100000,100000,100000,50000,50000 --500K
--40000,40000,40000,40000,20000,20000 --200K
--50000,50000,50000,50000,50000,50000 --300K
--one portfolio, summarize all 6 number to 500K as test goal.</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Save Trade Blotter (setUp)" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Save Trade Blotter (1 | 500K)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1510047156000</longProp>
        <longProp name="ThreadGroup.end_time">1510047156000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">props.put (&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));//BeanShell Post, props can be used among thread groups</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

//New blotter
vars.put(&quot;NewBlotterName&quot;,new String(&quot;BOU_TestBlotter500K&quot;));
//new portfolio to store the transaction posted from blotter
vars.put(&quot;NewPortfolioCode&quot;,new String(&quot;MO_PortForPosting&quot;));//don&apos;t change the portfoliocode &quot;MO_PortForPosting&quot;, the procedure for blotter post will use it.

//props.put (&quot;NewBlotterName&quot;,new String(&quot;BOU_TestBlotter500K&quot;));//BeanShell Post
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">--if procedure exists, delete it.
IF OBJECT_ID(&apos;pAddTransactionsToTradeBlotter&apos;) IS NOT NULL
    DROP PROCEDURE pAddTransactionsToTradeBlotter


--if the big blotter exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
declare @p1 xml
set @p1=null   

declare @BlotterID varchar(64)
set @BlotterID = (select ObjectID from AoObject where Name = &apos;${NewBlotterName}&apos;)
declare @auditeventid varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)

declare @p4 xml    
set @p4=convert(xml,N&apos;&lt;Root&gt; &lt;Blotter MaxLineAuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; NameSpaceID=&quot;221&quot; BlotterID=&quot;&apos;+@BlotterID+&apos;&quot; BlotterTypeID=&quot;105&quot; BlotterTypeDisplayName=&quot;Trade Blotter&quot; BlotterName=&quot;${NewBlotterName}&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot; IsSystem=&quot;0&quot; IsPrimaryBlotter=&quot;0&quot;/&gt;&lt;/Root&gt;&apos;)   
 
exec pQbTxProcessBlotter @OutputIDList=@p1 output,@AuthUserID=-1001,@RunAsUserID=-1001,@XmlBlotterDoc=@p4  
--select @p1



--if the big portfolio exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
--declare @auditeventid varchar(64)
declare @PortfolioID varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)
set @PortfolioID = (select ObjectID from AoObject where Name = &apos;${NewPortfolioCode}&apos; and classid=76)
--declare @p1 xml 
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio AuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; PortfolioID=&quot;&apos; + @PortfolioID + &apos;&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @Xmlportfolio=@p1,@isForcedDeleteActivities=1,@isForcedDeleteInterestedParties=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">--\\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pAddTransactionsToTradeBlotter.sql
--generate a procedure in APXFirm, execute the procedure to add transactions to a blotter

-- $Header: $

CREATE PROCEDURE pAddTransactionsToTradeBlotter
(
	@BlotterID int,
	@TranCnt1 int, --li cano cash
	@TranCnt2 int, --li afno
	@TranCnt3 int, --by afno
	@TranCnt4 int, --sl afno
	@TranCnt5 int, --dv afno
	@TranCnt6 int  --ss afno
)
AS
BEGIN
declare @TranTmp1 int
declare @TranTmp2 int
declare @TranTmp3 int
declare @TranTmp4 int
declare @TranTmp5 int
declare @TranTmp6 int

declare @TranMaxTmp int

declare @TradeDate1 date
declare @TradeDate2 date
declare @TradeDate3 date
declare @TradeDate4 date
declare @TradeDate5 date
declare @TradeDate6 date
declare @PortfolioID int
declare @PortfolioCode nvarchar(32)
declare @PortfolioCount int

declare @TranMax int
declare @TranInit int
set @TranInit = 20000
set @TranMax = @TranInit

set @TradeDate1 = &apos;05/01/2010&apos;;
set @TradeDate2 = &apos;06/01/2010&apos;;
set @TradeDate3 = &apos;07/01/2010&apos;;
set @TradeDate4 = &apos;08/01/2010&apos;;
set @TradeDate5 = &apos;09/01/2010&apos;;
set @TradeDate6 = &apos;10/01/2010&apos;;

Declare @PortfoioForPost table
(
	PortfolioID int,
	PortfolioCode nvarchar(32)
)

insert into @PortfoioForPost select PortfolioID, PortfolioCode from AdvApp.vPortfolio where PortfolioCode like &apos;MO_PortForPosting%&apos;


set @PortfolioCount = (select count(PortfolioID) from @PortfoioForPost)
--Set @TranCnt1 = 10

while @PortfolioCount&gt;0
Begin
	set @PortfolioID = (select MIN(PortfolioID) from @PortfoioForPost)
	set @PortfolioCode = (select PortfolioCode from @PortfoioForPost where PortfolioID = @PortfolioID)
	set @TranTmp1 = @TranCnt1
	set @TranTmp2 = @TranCnt2
	set @TranTmp3 = @TranCnt3
	set @TranTmp4 = @TranCnt4
	set @TranTmp5 = @TranCnt5
	set @TranTmp6 = @TranCnt6
	set @TranMaxTmp = @TranMax
	while  @TranTmp1 &gt; 0
	Begin
			begin tran
			exec dbo.padvauditeventadmin
		
			insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				TradeAmount,
				SourceID,
				RecID
			
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;li&apos;,
				Type1                      =                                   &apos;cano&apos;,
				Symbol1                    =                                   &apos;cash&apos;,
				SecurityID1				   =								   6,
				TradeDate                  =                                    @TradeDate1,
				TradeAmount				   =								    1000,
				SourceID                   =                                    1,
				RecID                      =                                    19
					

	exec dbo.padvauditeventend
	commit

			set @TranTmp1 = @TranTmp1 - 1
			set @TranMaxTmp = @TranMaxTmp- 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate1 = DATEADD(DAY,1,@TradeDate1)
				Set @TranMaxTmp = @TranInit
			End
	End

	--Set @TranCnt2 = 100
	Set @TranMaxTmp = @TranMax
	while  @TranTmp2 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				SourceID,
				RecID,
				MarkToMarket,
				Pledge,
				CustodianID,
				PerfContributionOrWithdrawal
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;li&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate2,
				Quantity                   =                                    100,
				TradeAmount				   =								    &apos;@804.82&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    6,
				MarkToMarket               =									1,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				PerfContributionOrWithdrawal =                                  1

	exec dbo.padvauditeventend
	commit
					

			set @TranTmp2 = @TranTmp2 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate2 = DATEADD(DAY,1,@TradeDate2)
				Set @TranMaxTmp = @TranMax
			End

	End

	--Set @TranCnt3 = 10000
	set @TranMaxTmp = @TranMax
	while  @TranTmp3 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				Pledge,
				CustodianID,
				PerfContributionOrWithdrawal,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;by&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate3,
				Quantity                   =                                    10,
				TradeAmount				   =								    800,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    0,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				PerfContributionOrWithdrawal =                                  1,
				BrokerRepSymbol            =									&apos;SB1&apos;

	exec dbo.padvauditeventend
	commit
				

			set @TranTmp3 = @TranTmp3 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate3 = DATEADD(DAY,1,@TradeDate3)
				Set @TranMaxTmp = @TranMax
			End

	End

	--Set @TranCnt4 = 10000
	set @TranMaxTmp = @TranMax
	while  @TranTmp4 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;sl&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate4,
				Quantity                   =                                    5,
				TradeAmount				   =								    &apos;@90&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    1,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				BrokerRepSymbol            =									&apos;SB1&apos;
			

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp4 = @TranTmp4 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate4 = DATEADD(DAY,1,@TradeDate4)
				Set @TranMaxTmp = @TranMax
			End

	End

	set @TranMaxTmp = @TranMax
	while  @TranTmp5 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID
			
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;dv&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   NULL,
				TradeDate                  =                                    @TradeDate5,
				Quantity                   =                                    10,
				TradeAmount				   =								    &apos;@2&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    23
			

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp5 = @TranTmp5 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate5 = DATEADD(DAY,1,@TradeDate5)
				Set @TranMaxTmp = @TranMax
			End

	End

	set @TranMaxTmp = @TranMax
	while  @TranTmp6 &gt; 0
	Begin
			begin tran
	exec dbo.padvauditeventadmin
	insert into AdvTradeBlotterLine 
				(
				BlotterID,
				PortfolioID,
				TransactionCode,
				Type1,
				Symbol1,
				SecurityID1,
				TradeDate,
				Quantity,
				TradeAmount,
				Type2,
				Symbol2,
				SourceID,
				RecID,
				MarkToMarket,
				ImpliedCommission,
				Pledge,
				CustodianID,
				BrokerRepSymbol
			
				)

				select 

				BlotterID				   =								   @BlotterID,
				PortfolioID				   =								   @PortfolioID,
				TransactionCode			   =								   &apos;ss&apos;,
				Type1                      =                                   &apos;afno&apos;,
				Symbol1                    =                                   &apos;NO0008000015&apos;,
				SecurityID1				   =								   26,
				TradeDate                  =                                    @TradeDate6,
				Quantity                   =                                    10,
				TradeAmount				   =								    &apos;@20&apos;,
				Type2                      =                                    &apos;cano&apos;,
				Symbol2                    =                                    &apos;cash&apos;,
				SourceID                   =                                    1,
				RecID                      =                                    0,
				MarkToMarket               =									1,
				ImpliedCommission          =									0,
				Pledge					   =									0,
				CustodianID				   =                                    65534,
				BrokerRepSymbol            =									&apos;SB1&apos;

	exec dbo.padvauditeventend
	commit
					


			set @TranTmp6 = @TranTmp6 - 1
			set @TranMaxTmp = @TranMaxTmp - 1
			if @TranMaxTmp = 0
			Begin
				Set @TradeDate6 = DATEADD(DAY,1,@TradeDate6)
				Set @TranMaxTmp = @TranMax
			End

	End
	Delete from @PortfoioForPost where PortfolioID = @PortfolioID
	set @PortfolioCount = @PortfolioCount -1

End
	
Return 0

End

--End \\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pAddTransactionsToTradeBlotter.sql
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">--Create a blotter

exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 
declare @p1 xml 
declare @p4 xml 
set @p4=convert(xml,N&apos;&lt;Root&gt;&lt;Blotter NameSpaceID=&quot;221&quot; OwnerID=&quot;-1001&quot; BlotterID=&quot;-1&quot; BlotterDisplayName=&quot;${NewBlotterName}&quot; BlotterTypeID=&quot;105&quot; BlotterName=&quot;${NewBlotterName}&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot;/&gt;&lt;/Root&gt;&apos;) 
exec pQbTxProcessBlotter @OutputIDList=@p1 output,@AuthUserID=-1001,@RunAsUserID=-1001,@XmlBlotterDoc=@p4  


--Create a portfolio ${NewPortfolioCode}
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 

--declare @p1 xml
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio ProcessingGroupName=&quot;Default Owners&quot; ProcessingGroupID=&quot;-14&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; OwnerName=&quot;Default Owners&quot; OwnerID=&quot;-14&quot; MaintainCalcData=&quot;1&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot; SupportMiFID=&quot;0&quot; AddToMasterGroup=&quot;1&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @xmlPortfolio=@p1,@xmlPortfolioBaseLabel=default,@xmlObjectAccessRights=default,@xmlPortfolioBaseReinvestException=default,@xmlPortfolioBaseIndex=default,@xmlPortfolioBaseSyntheticIndex=default,@xmlPortfolioAmortization=default,@xmlPortfolioGroupAssociation=default,@xmlPortfolioCompositeAssociation=default,@xmlInterestedParty=default,@xmlDashboardAssociation=default,@xmlPortfolioBaseCashClosing=default,@xmlPortfolioBaseClosing=default,@xmlSecTypeClosing=default,@isForcedDeleteActivities=default,@isForcedDeleteInterestedParties=default


--Add 500K transaction lines for blotter by calling the procedure created before
declare @BlotterID varchar(64)
set @BlotterID = (select ObjectID from AoObject where Name = &apos;${NewBlotterName}&apos;)
exec pAddTransactionsToTradeBlotter @BlotterID, 100000,100000,100000,100000,50000,50000 --500K
--100000,100000,100000,100000,50000,50000 --500K
--40000,40000,40000,40000,20000,20000 --200K
--50000,50000,50000,50000,50000,50000 --300K
--one portfolio, summarize all 6 number to 500K as test goal.</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Save Trade Blotter (500K) (Dummy)" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Open Trade Blotter (2 | 500K)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">portfolio.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">portfoliocode</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

vars.put(&quot;NewBlotterName&quot;,new String(&quot;BOU_TestBlotter500K&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Open Trade Blotter (2 | 500K)" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">declare @BlotterID varchar(64)
set @BlotterID = (select ObjectID from AoObject where Name = &apos;${NewBlotterName}&apos;)

exec dbo.pAxBlotterLineList @BlotterID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">col1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="3453">li</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">16</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - Portfolio Transaction Preparation -ToBeRemoved" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1510214413000</longProp>
        <longProp name="ThreadGroup.end_time">1510214413000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

//String portfolioid = vars.get(&quot;portfolioid&quot;);
//String portfoliocode = vars.get(&quot;portfoliocode&quot;);

//New portfolio
vars.put(&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));
//props.put (&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));//BeanShell Post

//byte[] encodedportfolioid = Base64.encodeBase64(portfolioid.getBytes());
//vars.put(&quot;base64HeaderValue&quot;,new String(encodedportfolioid));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">--if procedure exists, delete it.
IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
    DROP PROCEDURE pWilAddTransactionsToPortfolio


--if the big portfolio exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
declare @auditeventid varchar(64)
declare @PortfolioID varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)
set @PortfolioID = (select ObjectID from AoObject a join dbo.advPortfolio p on a.ObjectID = p.PortfolioID where a.Name = &apos;${NewPortfolioCode}&apos;)
declare @p1 xml 
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio AuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; PortfolioID=&quot;&apos; + @PortfolioID + &apos;&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @Xmlportfolio=@p1,@isForcedDeleteActivities=1,@isForcedDeleteInterestedParties=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">--\\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio_Norwegian.sql
--generate a procedure in APXFirm, execute the procedure to add transactions to a portfolio

--IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
--    DROP PROCEDURE pWilAddTransactionsToPortfolio

-- $Header: $

CREATE PROCEDURE pWilAddTransactionsToPortfolio
(
	@PortfolioCode nvarchar(32) = null,
	@PortfolioID int = null,
	@TransToAdd int = 100
)
AS
BEGIN

	if @TransToAdd is null or @TransToAdd &lt;= 0
	begin
		RAISERROR(&apos;The value of @TransToAdd %d is not valid.&apos;, 16, 1, @TransToAdd)
		return 0;
	end

	if @PortfolioID is not null and not exists (select * from AOObject where ObjectID = @PortfolioID and ClassID = 76) 
	begin
		RAISERROR(&apos;The PortfolioID %d is not a valid portfolio id in AOObject.&apos;, 16, 1, @PortfolioID)
		return 0;
	end

	if @PortfolioCode is not null select @PortfolioID = ObjectID from AOObject where Name = @PortfolioCode and ClassID = 76
	if @PortfolioID is null
	begin
		RAISERROR(&apos;The PortfolioCode %s is not a valid portfolio code in AOObject.&apos;, 16, 1, @PortfolioCode)
		return 0;
	end

	declare @SecurityID int
	select @SecurityID = SecurityID from AdvSecurity where Symbol = &apos;cash&apos; and SecTypeBaseCode = &apos;ca&apos; and PrincipalCurrencyCode = &apos;no&apos;-- Norwegian
	if @SecurityID is null
	begin
		RAISERROR(&apos;The security canocash does not exist.&apos;, 16, 1)
		return 0;
	end
	select @SecurityID as NewTransactionsSecurityID

	declare @MaxRowsPerTran int = 10000
	declare @RowsPerTran int
	declare @TranCnt int = @TransToAdd / @MaxRowsPerTran
	if @TranCnt = 0
	begin
		set @TranCnt = 1
		set @RowsPerTran = @TransToAdd
	end
	else
	begin
		set @RowsPerTran = @TransToAdd / @TranCnt
	end

	select @TranCnt as TranCnt, @RowsPerTran as RowsPerTran

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @TranID int
	select @TranID = MAX(TranID) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @TranID = IsNull(@TranID, 100) + 1
	select @TranID as StartingTranID

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @StartingDate date
	select @StartingDate = MAX(TradeDate) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @StartingDate = DATEADD(day, 1, IsNull(@StartingDate, &apos;1/1/1980&apos;))
	select @StartingDate as StartingTradeDate

	declare @SequenceNo int = 1
	declare @SeqNoInc int = 100
	declare @SeqNoMax int = @SeqNoInc * 1000

	declare @PostDate date = GETDATE()

	declare @Rows int

	while  @TranCnt &gt; 0
	begin

		if @@trancount = 0 begin tran; exec pAdvAuditEventBegin @userID = -1001, @functionID = 24

		set @Rows = 0

		while @Rows &lt;  @RowsPerTran
		begin

			insert into AdvPortfolioTransaction 
			(
			PortfolioID,
			TradeDate,
			RecID,
			TransactionCode,
			SecTypeCode1,
			SecurityID1,
			MarkToMarket,
			TradeAmount,
			Pledge,
			CustodianID,
			SourceID,
			PostDate,
			LotNumber,
			TranID,
			SequenceNo
			)

			select 

			PortfolioID				   =								   @PortfolioID,
			TradeDate				   =								   @StartingDate,
			RecID					   =								   20,
			TransactionCode			   =								   &apos;li&apos;,
			SecTypeCode1			   =								   &apos;ca&apos;,
			SecurityID1				   =								   @SecurityID,
			MarkToMarket			   =								    1,
			TradeAmount				   =								    100,
			Pledge					   =								    0,
			CustodianID				   =								    0,
			SourceID				   =								    2,
			PostDate				   =								    @PostDate,
			LotNumber				   =								    -3,
			TranID 					   =                                    @TranID,
			SequenceNo                 =                                    @SequenceNo

			set @TranID = @TranID + 1
			set @SequenceNo = @SequenceNo + @SeqNoInc
			if @SequenceNo &gt; @SeqNoMax
			begin
				set @StartingDate = DATEADD(day, 1, @StartingDate)
				set @SequenceNo = 1
			end

			set @Rows = @Rows + 1
		end -- Rows

		exec pAdvAuditEventEnd; if @@trancount &gt; 0 commit

		set @TranCnt = @TranCnt - 1

	end	 -- TranCnt

	select COUNT(*) as NumTxnAfter from AdvPortfolioTransaction where PortfolioID = @PortfolioID


	return 0
END

--End \\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio.sql
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">--Create a portfolio with code &quot;BOU_TestTrx500K&quot;
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 

declare @p1 xml
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio ProcessingGroupName=&quot;Default Owners&quot; ProcessingGroupID=&quot;-14&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; OwnerName=&quot;Default Owners&quot; OwnerID=&quot;-14&quot; MaintainCalcData=&quot;1&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot; SupportMiFID=&quot;0&quot; AddToMasterGroup=&quot;1&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @xmlPortfolio=@p1,@xmlPortfolioBaseLabel=default,@xmlObjectAccessRights=default,@xmlPortfolioBaseReinvestException=default,@xmlPortfolioBaseIndex=default,@xmlPortfolioBaseSyntheticIndex=default,@xmlPortfolioAmortization=default,@xmlPortfolioGroupAssociation=default,@xmlPortfolioCompositeAssociation=default,@xmlInterestedParty=default,@xmlDashboardAssociation=default,@xmlPortfolioBaseCashClosing=default,@xmlPortfolioBaseClosing=default,@xmlSecTypeClosing=default,@isForcedDeleteActivities=default,@isForcedDeleteInterestedParties=default


--Add 500K transaction lines for portfolio &quot;BOU_TestTrx500K&quot; by calling the procedure created before
exec pWilAddTransactionsToPortfolio ${NewPortfolioCode}, null, 500000--500000 --200</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="setUp Portfolio Transaction - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Save Portfolio Transaction (500K) (Data Preparation)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1510896617000</longProp>
        <longProp name="ThreadGroup.end_time">1510896617000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

//String portfolioid = vars.get(&quot;portfolioid&quot;);
//String portfoliocode = vars.get(&quot;portfoliocode&quot;);

//New portfolio
vars.put(&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));
//props.put (&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));//BeanShell Post

//byte[] encodedportfolioid = Base64.encodeBase64(portfolioid.getBytes());
//vars.put(&quot;base64HeaderValue&quot;,new String(encodedportfolioid));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">--if procedure exists, delete it.
IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
    DROP PROCEDURE pWilAddTransactionsToPortfolio


--if the big portfolio exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
declare @auditeventid varchar(64)
declare @PortfolioID varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)
set @PortfolioID = (select ObjectID from AoObject a join dbo.advPortfolio p on a.ObjectID = p.PortfolioID where a.Name = &apos;${NewPortfolioCode}&apos;)
declare @p1 xml 
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio AuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; PortfolioID=&quot;&apos; + @PortfolioID + &apos;&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @Xmlportfolio=@p1,@isForcedDeleteActivities=1,@isForcedDeleteInterestedParties=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">--\\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio_Norwegian.sql
--generate a procedure in APXFirm, execute the procedure to add transactions to a portfolio

--IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
--    DROP PROCEDURE pWilAddTransactionsToPortfolio

-- $Header: $

CREATE PROCEDURE pWilAddTransactionsToPortfolio
(
	@PortfolioCode nvarchar(32) = null,
	@PortfolioID int = null,
	@TransToAdd int = 100
)
AS
BEGIN

	if @TransToAdd is null or @TransToAdd &lt;= 0
	begin
		RAISERROR(&apos;The value of @TransToAdd %d is not valid.&apos;, 16, 1, @TransToAdd)
		return 0;
	end

	if @PortfolioID is not null and not exists (select * from AOObject where ObjectID = @PortfolioID and ClassID = 76) 
	begin
		RAISERROR(&apos;The PortfolioID %d is not a valid portfolio id in AOObject.&apos;, 16, 1, @PortfolioID)
		return 0;
	end

	if @PortfolioCode is not null select @PortfolioID = ObjectID from AOObject where Name = @PortfolioCode and ClassID = 76
	if @PortfolioID is null
	begin
		RAISERROR(&apos;The PortfolioCode %s is not a valid portfolio code in AOObject.&apos;, 16, 1, @PortfolioCode)
		return 0;
	end

	declare @SecurityID int
	select @SecurityID = SecurityID from AdvSecurity where Symbol = &apos;cash&apos; and SecTypeBaseCode = &apos;ca&apos; and PrincipalCurrencyCode = &apos;no&apos;-- Norwegian
	if @SecurityID is null
	begin
		RAISERROR(&apos;The security canocash does not exist.&apos;, 16, 1)
		return 0;
	end
	select @SecurityID as NewTransactionsSecurityID

	declare @MaxRowsPerTran int = 10000
	declare @RowsPerTran int
	declare @TranCnt int = @TransToAdd / @MaxRowsPerTran
	if @TranCnt = 0
	begin
		set @TranCnt = 1
		set @RowsPerTran = @TransToAdd
	end
	else
	begin
		set @RowsPerTran = @TransToAdd / @TranCnt
	end

	select @TranCnt as TranCnt, @RowsPerTran as RowsPerTran

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @TranID int
	select @TranID = MAX(TranID) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @TranID = IsNull(@TranID, 100) + 1
	select @TranID as StartingTranID

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @StartingDate date
	select @StartingDate = MAX(TradeDate) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @StartingDate = DATEADD(day, 1, IsNull(@StartingDate, &apos;1/1/1980&apos;))
	select @StartingDate as StartingTradeDate

	declare @SequenceNo int = 1
	declare @SeqNoInc int = 100
	declare @SeqNoMax int = @SeqNoInc * 1000

	declare @PostDate date = GETDATE()

	declare @Rows int

	while  @TranCnt &gt; 0
	begin

		if @@trancount = 0 begin tran; exec pAdvAuditEventBegin @userID = -1001, @functionID = 24

		set @Rows = 0

		while @Rows &lt;  @RowsPerTran
		begin

			insert into AdvPortfolioTransaction 
			(
			PortfolioID,
			TradeDate,
			RecID,
			TransactionCode,
			SecTypeCode1,
			SecurityID1,
			MarkToMarket,
			TradeAmount,
			Pledge,
			CustodianID,
			SourceID,
			PostDate,
			LotNumber,
			TranID,
			SequenceNo
			)

			select 

			PortfolioID				   =								   @PortfolioID,
			TradeDate				   =								   @StartingDate,
			RecID					   =								   20,
			TransactionCode			   =								   &apos;li&apos;,
			SecTypeCode1			   =								   &apos;ca&apos;,
			SecurityID1				   =								   @SecurityID,
			MarkToMarket			   =								    1,
			TradeAmount				   =								    100,
			Pledge					   =								    0,
			CustodianID				   =								    0,
			SourceID				   =								    2,
			PostDate				   =								    @PostDate,
			LotNumber				   =								    -3,
			TranID 					   =                                    @TranID,
			SequenceNo                 =                                    @SequenceNo

			set @TranID = @TranID + 1
			set @SequenceNo = @SequenceNo + @SeqNoInc
			if @SequenceNo &gt; @SeqNoMax
			begin
				set @StartingDate = DATEADD(day, 1, @StartingDate)
				set @SequenceNo = 1
			end

			set @Rows = @Rows + 1
		end -- Rows

		exec pAdvAuditEventEnd; if @@trancount &gt; 0 commit

		set @TranCnt = @TranCnt - 1

	end	 -- TranCnt

	select COUNT(*) as NumTxnAfter from AdvPortfolioTransaction where PortfolioID = @PortfolioID


	return 0
END

--End \\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio.sql
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">--Create a portfolio with code &quot;BOU_TestTrx500K&quot;
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 

declare @p1 xml
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio ProcessingGroupName=&quot;Default Owners&quot; ProcessingGroupID=&quot;-14&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; OwnerName=&quot;Default Owners&quot; OwnerID=&quot;-14&quot; MaintainCalcData=&quot;1&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot; SupportMiFID=&quot;0&quot; AddToMasterGroup=&quot;1&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @xmlPortfolio=@p1,@xmlPortfolioBaseLabel=default,@xmlObjectAccessRights=default,@xmlPortfolioBaseReinvestException=default,@xmlPortfolioBaseIndex=default,@xmlPortfolioBaseSyntheticIndex=default,@xmlPortfolioAmortization=default,@xmlPortfolioGroupAssociation=default,@xmlPortfolioCompositeAssociation=default,@xmlInterestedParty=default,@xmlDashboardAssociation=default,@xmlPortfolioBaseCashClosing=default,@xmlPortfolioBaseClosing=default,@xmlSecTypeClosing=default,@isForcedDeleteActivities=default,@isForcedDeleteInterestedParties=default


--Add 500K transaction lines for portfolio &quot;BOU_TestTrx500K&quot; by calling the procedure created before
exec pWilAddTransactionsToPortfolio ${NewPortfolioCode}, null, 300000--500000 --200
exec pWilAddTransactionsToPortfolio ${NewPortfolioCode}, null, 200000--500000 --200</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Save Portfolio Transaction (500K) (Dummy)" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Open Portfolio Transaction" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">portfolio.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">portfoliocode</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

//String portfolioid = vars.get(&quot;portfolioid&quot;);
String portfoliocode = vars.get(&quot;portfoliocode&quot;);

//New portfolio
//vars.put(&quot;NewPortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));
//vars.put (&quot;NewPortfolioCode&quot;, props.getProperty(&quot;NewPortfolioCode&quot;));//props can be used among thread groups



//byte[] encodedportfolioid = Base64.encodeBase64(portfolioid.getBytes());
//vars.put(&quot;base64HeaderValue&quot;,new String(encodedportfolioid));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="false">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">--if procedure exists, delete it.
IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
    DROP PROCEDURE pWilAddTransactionsToPortfolio


--if the big portfolio exists, delete it.
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7
declare @auditeventid varchar(64)
declare @PortfolioID varchar(64)
set @auditeventid = (select max(auditeventid) from AdvAuditEvent)
set @PortfolioID = (select ObjectID from AoObject a join dbo.advPortfolio p on a.ObjectID = p.PortfolioID where a.Name = &apos;${NewPortfolioCode}&apos;)
declare @p1 xml 
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio AuditEventID=&quot;&apos;+@auditeventid+&apos;&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; PortfolioID=&quot;&apos; + @PortfolioID + &apos;&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;D&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @Xmlportfolio=@p1,@isForcedDeleteActivities=1,@isForcedDeleteInterestedParties=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="false">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">--\\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio.sql
--generate a procedure in APXFirm, execute the procedure to add transactions to a portfolio

--IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
--    DROP PROCEDURE pWilAddTransactionsToPortfolio

-- $Header: $

CREATE PROCEDURE pWilAddTransactionsToPortfolio
(
	@PortfolioCode nvarchar(32) = null,
	@PortfolioID int = null,
	@TransToAdd int = 100
)
AS
BEGIN

	if @TransToAdd is null or @TransToAdd &lt;= 0
	begin
		RAISERROR(&apos;The value of @TransToAdd %d is not valid.&apos;, 16, 1, @TransToAdd)
		return 0;
	end

	if @PortfolioID is not null and not exists (select * from AOObject where ObjectID = @PortfolioID and ClassID = 76) 
	begin
		RAISERROR(&apos;The PortfolioID %d is not a valid portfolio id in AOObject.&apos;, 16, 1, @PortfolioID)
		return 0;
	end

	if @PortfolioCode is not null select @PortfolioID = ObjectID from AOObject where Name = @PortfolioCode and ClassID = 76
	if @PortfolioID is null
	begin
		RAISERROR(&apos;The PortfolioCode %s is not a valid portfolio code in AOObject.&apos;, 16, 1, @PortfolioCode)
		return 0;
	end

	declare @SecurityID int
	select @SecurityID = SecurityID from AdvSecurity where Symbol = &apos;cash&apos; and SecTypeBaseCode = &apos;ca&apos; and PrincipalCurrencyCode = &apos;no&apos;-- Norwegian
	if @SecurityID is null
	begin
		RAISERROR(&apos;The security canocash does not exist.&apos;, 16, 1)
		return 0;
	end
	select @SecurityID as NewTransactionsSecurityID

	declare @MaxRowsPerTran int = 10000
	declare @RowsPerTran int
	declare @TranCnt int = @TransToAdd / @MaxRowsPerTran
	if @TranCnt = 0
	begin
		set @TranCnt = 1
		set @RowsPerTran = @TransToAdd
	end
	else
	begin
		set @RowsPerTran = @TransToAdd / @TranCnt
	end

	select @TranCnt as TranCnt, @RowsPerTran as RowsPerTran

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @TranID int
	select @TranID = MAX(TranID) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @TranID = IsNull(@TranID, 100) + 1
	select @TranID as StartingTranID

	select COUNT(*) as NumTxnBefore from AdvPortfolioTransaction where PortfolioID = @PortfolioID

	declare @StartingDate date
	select @StartingDate = MAX(TradeDate) from AdvPortfolioTransaction where PortfolioID = @PortfolioID
	set @StartingDate = DATEADD(day, 1, IsNull(@StartingDate, &apos;1/1/1980&apos;))
	select @StartingDate as StartingTradeDate

	declare @SequenceNo int = 1
	declare @SeqNoInc int = 100
	declare @SeqNoMax int = @SeqNoInc * 1000

	declare @PostDate date = GETDATE()

	declare @Rows int

	while  @TranCnt &gt; 0
	begin

		if @@trancount = 0 begin tran; exec pAdvAuditEventBegin @userID = -1001, @functionID = 24

		set @Rows = 0

		while @Rows &lt;  @RowsPerTran
		begin

			insert into AdvPortfolioTransaction 
			(
			PortfolioID,
			TradeDate,
			RecID,
			TransactionCode,
			SecTypeCode1,
			SecurityID1,
			MarkToMarket,
			TradeAmount,
			Pledge,
			CustodianID,
			SourceID,
			PostDate,
			LotNumber,
			TranID,
			SequenceNo
			)

			select 

			PortfolioID				   =								   @PortfolioID,
			TradeDate				   =								   @StartingDate,
			RecID					   =								   20,
			TransactionCode			   =								   &apos;li&apos;,
			SecTypeCode1			   =								   &apos;ca&apos;,
			SecurityID1				   =								   @SecurityID,
			MarkToMarket			   =								    1,
			TradeAmount				   =								    100,
			Pledge					   =								    0,
			CustodianID				   =								    0,
			SourceID				   =								    2,
			PostDate				   =								    @PostDate,
			LotNumber				   =								    -3,
			TranID 					   =                                    @TranID,
			SequenceNo                 =                                    @SequenceNo

			set @TranID = @TranID + 1
			set @SequenceNo = @SequenceNo + @SeqNoInc
			if @SequenceNo &gt; @SeqNoMax
			begin
				set @StartingDate = DATEADD(day, 1, @StartingDate)
				set @SequenceNo = 1
			end

			set @Rows = @Rows + 1
		end -- Rows

		exec pAdvAuditEventEnd; if @@trancount &gt; 0 commit

		set @TranCnt = @TranCnt - 1

	end	 -- TranCnt

	select COUNT(*) as NumTxnAfter from AdvPortfolioTransaction where PortfolioID = @PortfolioID


	return 0
END

--End \\cossql1\UFIDA_HomeDir\AllUFIDAShared\APX_QA\SQLScript\pWilAddTransactionsToPortfolio.sql
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="false">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">--Create a portfolio with code &quot;BOU_TestTrx500K&quot;
exec APX.pSessionInfoSet @AuthenticatedUserID=-1001,@RunAsUserID=-1001,@FunctionID=7 

declare @p1 xml
set @p1=convert(xml,N&apos;&lt;Root&gt;&lt;Portfolio ProcessingGroupName=&quot;Default Owners&quot; ProcessingGroupID=&quot;-14&quot; PortfolioCode=&quot;${NewPortfolioCode}&quot; OwnerName=&quot;Default Owners&quot; OwnerID=&quot;-14&quot; MaintainCalcData=&quot;1&quot; _OriginalRowID=&quot;1&quot; DBAction=&quot;I&quot; SupportMiFID=&quot;0&quot; AddToMasterGroup=&quot;1&quot;/&gt;&lt;/Root&gt;&apos;)
exec APX.pPortfolioProcessWeb @xmlPortfolio=@p1,@xmlPortfolioBaseLabel=default,@xmlObjectAccessRights=default,@xmlPortfolioBaseReinvestException=default,@xmlPortfolioBaseIndex=default,@xmlPortfolioBaseSyntheticIndex=default,@xmlPortfolioAmortization=default,@xmlPortfolioGroupAssociation=default,@xmlPortfolioCompositeAssociation=default,@xmlInterestedParty=default,@xmlDashboardAssociation=default,@xmlPortfolioBaseCashClosing=default,@xmlPortfolioBaseClosing=default,@xmlSecTypeClosing=default,@isForcedDeleteActivities=default,@isForcedDeleteInterestedParties=default


--Add 500K transaction lines for portfolio &quot;BOU_TestTrx500K&quot; by calling the procedure created before
exec pWilAddTransactionsToPortfolio ${NewPortfolioCode}, null, 1100 --500000</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Open multiple portfolio transactions (1 | 500K)" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">declare @PortfolioID varchar(64)
set @PortfolioID = (select ObjectID from AoObject a join dbo.advPortfolio p on a.ObjectID = p.PortfolioID where a.Name = &apos;${portfoliocode}&apos;)

exec dbo.pAxPortfolioTransactionList @PortfolioID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">col1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="1385146065">${portfolioid}</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">16</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group-Save Portfolio Transaction" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">portfolio.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">portfoliocode</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;
String portfoliocode = vars.get(&quot;portfoliocode&quot;);


//vars.put(&quot;PortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));//portfoliocode, will create a new portfolio in JDBC PreProcessor, and add 500K transactions for it.

//Transaction information
//vars.put(&quot;PortfolioCode&quot;,new String(&quot;BOU_TestTrx500K&quot;));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Save 1 transaction to multiple portfolios (1 | 500K)" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">declare @PortfolioID varchar(64)
set @PortfolioID = (select ObjectID from AoObject a join dbo.advPortfolio p on a.ObjectID = p.PortfolioID where a.Name = &apos;${portfoliocode}&apos;)

--Add one transaction li caxx cash to @PortfolioID
begin tran
exec dbo.pAdvAuditEventAdmin 

exec dbo.pAxPortfolioTransactionPut @PortfolioTransactionID=0, @SequenceNo=0, @PortfolioID=@PortfolioID, @RecID=7, @TransactionCode=&apos;li&apos;, @Comment=N&apos;&apos;, @Type1=&apos;cano&apos;, @Symbol1=N&apos;cash&apos;, 
@TradeDate=&apos;2017-11-06&apos;, @SettleDate=&apos;1753-01-01&apos;, @OriginalCostDate=&apos;1753-01-01&apos;, @Quantity=500, 
@QuantityPrec=0, @ClosingMethodCode=&apos;&apos;, @Type2=&apos;&apos;, @Symbol2=N&apos;&apos;, @MarkToMarket=1, @TradeAmount=5000, 
@TradeAmountPrec=0, @ExchangeID=0, @Broker=N&apos;&apos;, @ImpliedCommission=0, @CommissionPurposeID=0, @Pledge=0, @CustodianID=-2, 
@DestPledge=0, @DestCustodianID=0, @TransUserDef1ID=0, @TransUserDef2ID=0, @TransUserDef3ID=0, @TransUserDef4ID=0, @TransUserDef5ID=0, 
@TransUserDef6ID=0, @TransUserDef7ID=0, @TransUserDef8ID=0, @TransUserDef9ID=0, @TranID=103, @IPCounterAsInt=-3, @SourceID=1, @PostDate=&apos;2017-11-06&apos;, 
@Recon=&apos;n&apos;, @LotNumber=1, @StrategyID=0, @RecordDate=&apos;1753-01-01&apos;, @DivTradeDate=&apos;1753-01-01&apos;, @PerfContributionOrWithdrawal=1, @ApplyToShortPosition=0, 
@VersusDate=&apos;1753-01-01&apos;, @SettledByDate=&apos;1753-01-01&apos;, @FeePeriodDate=&apos;1753-01-01&apos;, @BrokerFirmID=0, @ReconTranID=-3, @SRRecon=&apos;n&apos;, 
@SecurityID1=-3, @SecurityID2=-3, @BrokerRepSecurityID=-3, @SRReconTranID=-3, @PredecessorTranID=34369, @BlotterLineGroupNumber=0, @SourceBlotterLineID=0

exec dbo.pAdvAuditEventEnd
commit
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">col1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="false">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">IF OBJECT_ID(&apos;pWilAddTransactionsToPortfolio&apos;) IS NOT NULL
    DROP PROCEDURE pWilAddTransactionsToPortfolio</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="1630750769">PortfolioTransactionID</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">16</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
